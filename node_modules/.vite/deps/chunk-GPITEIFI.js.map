{
  "version": 3,
  "sources": ["../../vuetify/src/components/VTabs/VTab.tsx", "../../vuetify/src/components/VTabs/shared.ts", "../../vuetify/src/components/VTabs/VTabs.tsx", "../../vuetify/src/components/VTabs/VTabsWindow.tsx", "../../vuetify/src/components/VTabs/VTabsWindowItem.tsx"],
  "sourcesContent": ["// Styles\nimport './VTab.sass'\n\n// Components\nimport { makeVBtnProps, VBtn } from '@/components/VBtn/VBtn'\n\n// Composables\nimport { useTextColor } from '@/composables/color'\nimport { forwardRefs } from '@/composables/forwardRefs'\n\n// Utilities\nimport { computed, ref } from 'vue'\nimport { VTabsSymbol } from './shared'\nimport { animate, genericComponent, omit, propsFactory, standardEasing, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { VBtnSlots } from '@/components/VBtn/VBtn'\n\nexport const makeVTabProps = propsFactory({\n  fixed: Boolean,\n\n  sliderColor: String,\n  hideSlider: Boolean,\n\n  direction: {\n    type: String as PropType<'horizontal' | 'vertical'>,\n    default: 'horizontal',\n  },\n\n  ...omit(makeVBtnProps({\n    selectedClass: 'v-tab--selected',\n    variant: 'text' as const,\n  }), [\n    'active',\n    'block',\n    'flat',\n    'location',\n    'position',\n    'symbol',\n  ]),\n}, 'VTab')\n\nexport const VTab = genericComponent<VBtnSlots>()({\n  name: 'VTab',\n\n  props: makeVTabProps(),\n\n  setup (props, { slots, attrs }) {\n    const { textColorClasses: sliderColorClasses, textColorStyles: sliderColorStyles } = useTextColor(() => props.sliderColor)\n\n    const rootEl = ref<VBtn>()\n    const sliderEl = ref<HTMLElement>()\n\n    const isHorizontal = computed(() => props.direction === 'horizontal')\n    const isSelected = computed(() => rootEl.value?.group?.isSelected.value ?? false)\n\n    function updateSlider ({ value }: { value: boolean }) {\n      if (value) {\n        const prevEl: HTMLElement | undefined = rootEl.value?.$el.parentElement?.querySelector('.v-tab--selected .v-tab__slider')\n        const nextEl = sliderEl.value\n\n        if (!prevEl || !nextEl) return\n\n        const color = getComputedStyle(prevEl).color\n\n        const prevBox = prevEl.getBoundingClientRect()\n        const nextBox = nextEl.getBoundingClientRect()\n\n        const xy = isHorizontal.value ? 'x' : 'y'\n        const XY = isHorizontal.value ? 'X' : 'Y'\n        const rightBottom = isHorizontal.value ? 'right' : 'bottom'\n        const widthHeight = isHorizontal.value ? 'width' : 'height'\n\n        const prevPos = prevBox[xy]\n        const nextPos = nextBox[xy]\n        const delta = prevPos > nextPos\n          ? prevBox[rightBottom] - nextBox[rightBottom]\n          : prevBox[xy] - nextBox[xy]\n        const origin =\n          Math.sign(delta) > 0 ? (isHorizontal.value ? 'right' : 'bottom')\n          : Math.sign(delta) < 0 ? (isHorizontal.value ? 'left' : 'top')\n          : 'center'\n        const size = Math.abs(delta) + (Math.sign(delta) < 0 ? prevBox[widthHeight] : nextBox[widthHeight])\n        const scale = size / Math.max(prevBox[widthHeight], nextBox[widthHeight]) || 0\n        const initialScale = prevBox[widthHeight] / nextBox[widthHeight] || 0\n\n        const sigma = 1.5\n        animate(nextEl, {\n          backgroundColor: [color, 'currentcolor'],\n          transform: [\n            `translate${XY}(${delta}px) scale${XY}(${initialScale})`,\n            `translate${XY}(${delta / sigma}px) scale${XY}(${(scale - 1) / sigma + 1})`,\n            'none',\n          ],\n          transformOrigin: Array(3).fill(origin),\n        }, {\n          duration: 225,\n          easing: standardEasing,\n        })\n      }\n    }\n\n    useRender(() => {\n      const btnProps = VBtn.filterProps(props)\n\n      return (\n        <VBtn\n          symbol={ VTabsSymbol }\n          ref={ rootEl }\n          class={[\n            'v-tab',\n            props.class,\n          ]}\n          style={ props.style }\n          tabindex={ isSelected.value ? 0 : -1 }\n          role=\"tab\"\n          aria-selected={ String(isSelected.value) }\n          active={ false }\n          { ...btnProps }\n          { ...attrs }\n          block={ props.fixed }\n          maxWidth={ props.fixed ? 300 : undefined }\n          onGroup:selected={ updateSlider }\n        >\n          {{\n            ...slots,\n            default: () => (\n              <>\n                { slots.default?.() ?? props.text }\n\n                { !props.hideSlider && (\n                  <div\n                    ref={ sliderEl }\n                    class={[\n                      'v-tab__slider',\n                      sliderColorClasses.value,\n                    ]}\n                    style={ sliderColorStyles.value }\n                  />\n                )}\n              </>\n            ),\n          }}\n        </VBtn>\n      )\n    })\n\n    return forwardRefs({}, rootEl)\n  },\n})\n\nexport type VTab = InstanceType<typeof VTab>\n", "// Types\nimport type { InjectionKey } from 'vue'\nimport type { GroupProvide } from '@/composables/group'\n\nexport const VTabsSymbol: InjectionKey<GroupProvide> = Symbol.for('vuetify:v-tabs')\n", "// Styles\nimport './VTabs.sass'\n\n// Components\nimport { VTab } from './VTab'\nimport { VTabsWindow } from './VTabsWindow'\nimport { VTabsWindowItem } from './VTabsWindowItem'\nimport { makeVSlideGroupProps, VSlideGroup } from '@/components/VSlideGroup/VSlideGroup'\n\n// Composables\nimport { useBackgroundColor } from '@/composables/color'\nimport { provideDefaults } from '@/composables/defaults'\nimport { makeDensityProps, useDensity } from '@/composables/density'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { useScopeId } from '@/composables/scopeId'\nimport { makeTagProps } from '@/composables/tag'\n\n// Utilities\nimport { computed, toRef } from 'vue'\nimport { VTabsSymbol } from './shared'\nimport { convertToUnit, genericComponent, isObject, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { GenericProps } from '@/util'\n\nexport type TabItem = string | number | Record<string, any>\n\nexport type VTabsSlot<T> = {\n  item: T\n}\n\nexport type VTabsSlots<T> = {\n  default: never\n  tab: VTabsSlot<T>\n  item: VTabsSlot<T>\n  window: never\n} & {\n  [key: `tab.${string}`]: VTabsSlot<T>\n  [key: `item.${string}`]: VTabsSlot<T>\n}\n\nfunction parseItems (items: readonly TabItem[] | undefined) {\n  if (!items) return []\n\n  return items.map(item => {\n    if (!isObject(item)) return { text: item, value: item }\n\n    return item\n  })\n}\n\nexport const makeVTabsProps = propsFactory({\n  alignTabs: {\n    type: String as PropType<'start' | 'title' | 'center' | 'end'>,\n    default: 'start',\n  },\n  color: String,\n  fixedTabs: Boolean,\n  items: {\n    type: Array as PropType<readonly TabItem[]>,\n    default: () => ([]),\n  },\n  stacked: Boolean,\n  bgColor: String,\n  grow: Boolean,\n  height: {\n    type: [Number, String],\n    default: undefined,\n  },\n  hideSlider: Boolean,\n  sliderColor: String,\n\n  ...makeVSlideGroupProps({\n    mandatory: 'force' as const,\n    selectedClass: 'v-tab-item--selected',\n  }),\n  ...makeDensityProps(),\n  ...makeTagProps(),\n}, 'VTabs')\n\nexport const VTabs = genericComponent<new <T = TabItem>(\n  props: {\n    items?: T[]\n  },\n  slots: VTabsSlots<T>\n) => GenericProps<typeof props, typeof slots>>()({\n  name: 'VTabs',\n\n  props: makeVTabsProps(),\n\n  emits: {\n    'update:modelValue': (v: unknown) => true,\n  },\n\n  setup (props, { attrs, slots }) {\n    const model = useProxiedModel(props, 'modelValue')\n    const items = computed(() => parseItems(props.items))\n    const { densityClasses } = useDensity(props)\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(() => props.bgColor)\n    const { scopeId } = useScopeId()\n\n    provideDefaults({\n      VTab: {\n        color: toRef(() => props.color),\n        direction: toRef(() => props.direction),\n        stacked: toRef(() => props.stacked),\n        fixed: toRef(() => props.fixedTabs),\n        sliderColor: toRef(() => props.sliderColor),\n        hideSlider: toRef(() => props.hideSlider),\n      },\n    })\n\n    useRender(() => {\n      const slideGroupProps = VSlideGroup.filterProps(props)\n      const hasWindow = !!(slots.window || props.items.length > 0)\n\n      return (\n        <>\n          <VSlideGroup\n            { ...slideGroupProps }\n            v-model={ model.value }\n            class={[\n              'v-tabs',\n              `v-tabs--${props.direction}`,\n              `v-tabs--align-tabs-${props.alignTabs}`,\n              {\n                'v-tabs--fixed-tabs': props.fixedTabs,\n                'v-tabs--grow': props.grow,\n                'v-tabs--stacked': props.stacked,\n              },\n              densityClasses.value,\n              backgroundColorClasses.value,\n              props.class,\n            ]}\n            style={[\n              { '--v-tabs-height': convertToUnit(props.height) },\n              backgroundColorStyles.value,\n              props.style,\n            ]}\n            role=\"tablist\"\n            symbol={ VTabsSymbol }\n            { ...scopeId }\n            { ...attrs }\n          >\n            { slots.default?.() ?? items.value.map(item => (\n              slots.tab?.({ item }) ?? (\n                <VTab\n                  { ...item }\n                  key={ item.text }\n                  value={ item.value }\n                  v-slots={{\n                    default: slots[`tab.${item.value}`] ? () => slots[`tab.${item.value}`]?.({ item }) : undefined,\n                  }}\n                />\n              )\n            ))}\n          </VSlideGroup>\n\n          { hasWindow && (\n            <VTabsWindow\n              v-model={ model.value }\n              key=\"tabs-window\"\n              { ...scopeId }\n            >\n              { items.value.map(item => slots.item?.({ item }) ?? (\n                <VTabsWindowItem\n                  value={ item.value }\n                  v-slots={{\n                    default: () => slots[`item.${item.value}`]?.({ item }),\n                  }}\n                />\n              ))}\n\n              { slots.window?.() }\n            </VTabsWindow>\n          )}\n        </>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VTabs = InstanceType<typeof VTabs>\n", "// Components\nimport { makeVWindowProps, VWindow } from '@/components/VWindow/VWindow'\n\n// Composables\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, inject } from 'vue'\nimport { genericComponent, omit, propsFactory, useRender } from '@/util'\n\n// Types\nimport { VTabsSymbol } from './shared'\n\nexport const makeVTabsWindowProps = propsFactory({\n  ...omit(makeVWindowProps(), ['continuous', 'nextIcon', 'prevIcon', 'showArrows', 'touch', 'mandatory']),\n}, 'VTabsWindow')\n\nexport const VTabsWindow = genericComponent()({\n  name: 'VTabsWindow',\n\n  props: makeVTabsWindowProps(),\n\n  emits: {\n    'update:modelValue': (v: unknown) => true,\n  },\n\n  setup (props, { slots }) {\n    const group = inject(VTabsSymbol, null)\n    const _model = useProxiedModel(props, 'modelValue')\n\n    const model = computed({\n      get () {\n        // Always return modelValue if defined\n        // or if not within a VTabs group\n        if (_model.value != null || !group) return _model.value\n\n        // If inside of a VTabs, find the currently selected\n        // item by id. Item value may be assigned by its index\n        return group.items.value.find(item => group.selected.value.includes(item.id))?.value\n      },\n      set (val) {\n        _model.value = val\n      },\n    })\n\n    useRender(() => {\n      const windowProps = VWindow.filterProps(props)\n\n      return (\n        <VWindow\n          _as=\"VTabsWindow\"\n          { ...windowProps }\n          v-model={ model.value }\n          class={[\n            'v-tabs-window',\n            props.class,\n          ]}\n          style={ props.style }\n          mandatory={ false }\n          touch={ false }\n          v-slots={ slots }\n        />\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VTabsWindow = InstanceType<typeof VTabsWindow>\n", "// Components\nimport { makeVWindowItemProps, VWindowItem } from '@/components/VWindow/VWindowItem'\n\n// Utilities\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\nexport const makeVTabsWindowItemProps = propsFactory({\n  ...makeVWindowItemProps(),\n}, 'VTabsWindowItem')\n\nexport const VTabsWindowItem = genericComponent()({\n  name: 'VTabsWindowItem',\n\n  props: makeVTabsWindowItemProps(),\n\n  setup (props, { slots }) {\n    useRender(() => {\n      const windowItemProps = VWindowItem.filterProps(props)\n\n      return (\n        <VWindowItem\n          _as=\"VTabsWindowItem\"\n          { ...windowItemProps }\n          class={[\n            'v-tabs-window-item',\n            props.class,\n          ]}\n          style={ props.style }\n          v-slots={ slots }\n        />\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VTabsWindowItem = InstanceType<typeof VTabsWindowItem>\n"],
  "mappings": "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",
  "names": ["VTabsSymbol", "Symbol", "for", "makeVTabProps", "propsFactory", "fixed", "Boolean", "sliderColor", "String", "hideSlider", "direction", "type", "default", "omit", "makeVBtnProps", "selectedClass", "variant", "VTab", "genericComponent", "name", "props", "setup", "_ref", "slots", "attrs", "textColorClasses", "sliderColorClasses", "textColorStyles", "sliderColorStyles", "useTextColor", "rootEl", "ref", "sliderEl", "isHorizontal", "computed", "isSelected", "value", "group", "updateSlider", "_ref2", "prevEl", "$el", "parentElement", "querySelector", "nextEl", "color", "getComputedStyle", "prevBox", "getBoundingClientRect", "nextBox", "xy", "XY", "rightBottom", "widthHeight", "prevPos", "nextPos", "delta", "origin", "Math", "sign", "size", "abs", "scale", "max", "initialScale", "sigma", "animate", "backgroundColor", "transform", "transformOrigin", "Array", "fill", "duration", "easing", "standardEasing", "useRender", "btnProps", "VBtn", "filterProps", "_createVNode", "_mergeProps", "VTabsSymbol", "class", "style", "undefined", "_Fragment", "text", "forwardRefs", "makeVTabsWindowProps", "propsFactory", "omit", "makeVWindowProps", "VTabsWindow", "genericComponent", "name", "props", "emits", "v", "setup", "_ref", "slots", "group", "inject", "VTabsSymbol", "_model", "useProxiedModel", "model", "computed", "get", "value", "items", "find", "item", "selected", "includes", "id", "set", "val", "useRender", "windowProps", "VWindow", "filterProps", "_createVNode", "_mergeProps", "$event", "class", "style", "makeVTabsWindowItemProps", "propsFactory", "makeVWindowItemProps", "VTabsWindowItem", "genericComponent", "name", "props", "setup", "_ref", "slots", "useRender", "windowItemProps", "VWindowItem", "filterProps", "_createVNode", "_mergeProps", "class", "style", "parseItems", "items", "map", "item", "isObject", "text", "value", "makeVTabsProps", "propsFactory", "alignTabs", "type", "String", "default", "color", "fixedTabs", "Boolean", "Array", "stacked", "bgColor", "grow", "height", "Number", "undefined", "hideSlider", "sliderColor", "makeVSlideGroupProps", "mandatory", "selectedClass", "makeDensityProps", "makeTagProps", "VTabs", "genericComponent", "name", "props", "emits", "v", "setup", "_ref", "attrs", "slots", "model", "useProxiedModel", "computed", "densityClasses", "useDensity", "backgroundColorClasses", "backgroundColorStyles", "useBackgroundColor", "scopeId", "useScopeId", "provideDefaults", "VTab", "toRef", "direction", "fixed", "useRender", "slideGroupProps", "VSlideGroup", "filterProps", "hasWindow", "window", "length", "_createVNode", "_Fragment", "_mergeProps", "$event", "class", "convertToUnit", "style", "VTabsSymbol", "tab", "VTabsWindow", "VTabsWindowItem"]
}
